/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";class t{constructor(t,e,i){this.row=e,this.col=i,this.blockType=t}getBlockType(){return this.blockType}getRow(){return this.row}getCol(){return this.col}}var e,i;!function(t){t[t.Empty=0]="Empty",t[t.Wall=1]="Wall"}(e||(e={}));class s{constructor(e,i,s,a){this.blocks=new Array,this.canvas=a,this.cellWidth=e,this.cellHeight=i,s&&s.forEach(((e,i)=>{let s=new Array;e.forEach(((e,a)=>{s.push(new t(e,i,a))})),this.blocks.push(s)}))}drawMap(){let t=this.canvas.getContext("2d");this.blocks.forEach(((i,s)=>{i.forEach(((i,a)=>{i.blockType===e.Wall&&(t.beginPath(),t.strokeStyle="black",t.rect(this.cellWidth*a,this.cellHeight*s,this.cellWidth,this.cellHeight),t.stroke())}))}))}getBlocks(){return this.blocks}}class a{constructor(t,e,i,s){this.walkingPlayBackRate=1,this.runningPlayBackRate=2,this.crouchingPlayBackRate=.7,this.walkingVolume=.3,this.runningVolume=.45,this.crouchingVolume=.15,this.playBackRate=e||this.walkingPlayBackRate,this.audio=document.getElementById(t),this.audio.loop=null==i||i,this.volume=s||this.walkingVolume}setAudioData(){this.audio.playbackRate=this.playBackRate,this.audio.volume=this.volume}setPlayBackRate(t){this.playBackRate=t,this.setAudioData()}setVolume(t){this.volume=t,this.setAudioData()}play(){this.audio.play()}stop(){this.audio.pause(),this.audio.currentTime=0}setAudioWalking(){this.playBackRate=this.walkingPlayBackRate,this.volume=this.walkingVolume,this.setAudioData()}setAudioCrouching(){this.playBackRate=this.crouchingPlayBackRate,this.volume=this.crouchingVolume,this.setAudioData()}setAudioRunning(){this.playBackRate=this.runningPlayBackRate,this.volume=this.runningVolume,this.setAudioData()}}class l{constructor(t){this.dir=t,this.x=Math.cos(this.toRad(t)),this.y=Math.sin(this.toRad(t))}updateDir(t){this.dir+=t,this.x=Math.cos(this.toRad(this.dir)),this.y=Math.sin(this.toRad(this.dir))}setDir(t){this.dir=t,this.x=Math.cos(this.toRad(this.dir)),this.y=Math.sin(this.toRad(this.dir))}toRad(t){return t*Math.PI/180}getDirDeg(){return this.dir}getDirRad(){return this.dir*Math.PI/180}getX(){return this.x}getY(){return this.y}}class r{constructor(){}pointInRectangle(t,e){var i=this.vector(e.A,e.B),s=this.vector(e.A,t),a=this.vector(e.B,e.C),l=this.vector(e.B,t),r=this.dot(i,s),o=this.dot(i,i),h=this.dot(a,l),n=this.dot(a,a);return 0<=r&&r<=o&&0<=h&&h<=n}vector(t,e){return{x:e.x-t.x,y:e.y-t.y}}toRad(t){return t*Math.PI/180}toDeg(t){return t/Math.PI*180}dot(t,e){return t.x*e.x+t.y*e.y}getMapBlockFromCoord(t,e,i,s){return{col:Math.ceil(t/i)-1,row:Math.ceil(e/s)-1}}inMapBlock(t,i,s,a,l){return s.getBlocks()[this.getMapBlockFromCoord(t,i,a,l).row][this.getMapBlockFromCoord(t,i,a,l).col].getBlockType()===e.Wall}dist(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}}class o{constructor(t,e,i,s,a){this.velocity=7,this.dim=1.5,this.crouchedBullet=!1,this.util=new r,this.xPos=t,this.yPos=e,this.uVecDir=i,this.areaState=a,this.crouchedBullet=s}moveBullet(){this.xPos+=this.velocity*this.uVecDir.getX(),this.yPos+=this.velocity*this.uVecDir.getY()}checkWallHit(){let t=new l(this.uVecDir.getDirDeg());for(let e=0;e<360;e+=5){let e=this.xPos+t.getX()*(this.dim+.01),i=this.yPos+t.getY()*(this.dim+.01);if(this.util.inMapBlock(e,i,this.areaState.getMap(),this.areaState.getCellWidth(),this.areaState.getCellHeight()))return!0;t.updateDir(5)}return!1}draw2D(){let t=this.areaState.getCanvas2D().getContext("2d");t.fillStyle="grey",t.moveTo(this.xPos,this.yPos),t.beginPath(),t.arc(this.xPos,this.yPos,this.dim,0,2*Math.PI),t.fill()}getX(){return this.xPos}getY(){return this.yPos}getCrouchedBullet(){return this.crouchedBullet}getDim(){return this.dim}}!function(t){t.UP="w",t.LEFT_ROTATION="a",t.DOWN="s",t.RIGHT_ROTATION="d",t.CROUCH="c",t.RUN=" "}(i||(i={}));class h{constructor(t,e,s,a,h,n){this.standingVel=1.5,this.crouchingVel=.75,this.runningVel=3,this.standingAngularVel=9,this.crouchingAngularVel=1.5,this.playerCircleRadius=2,this.keysState={},this.bullets=[],this.util=new r,this.xPos=t,this.yPos=e,this.dirUVec=s,this.movementAudioControl=h,this.shootingAudioControl=n,this.areaState=a,window.addEventListener("click",(()=>{let t=Math.atan((this.curMousePosX-this.areaState.canvas3D.width/2)/350)+this.dirUVec.getDirRad(),e=new l(this.util.toDeg(t));this.bullets.push(new o(this.getXMid(),this.getYMid(),e,this.isPlayerCrouching(),this.areaState)),this.shootingAudioControl.stop(),this.shootingAudioControl.play()})),window.addEventListener("keyup",(t=>{switch(t.key){case i.RUN:this.keysState[i.CROUCH]||(this.movementAudioControl.setAudioWalking(),this.keysState[i.RUN]=!1);break;case i.CROUCH:this.keysState[i.RUN]||(this.movementAudioControl.setAudioWalking(),this.keysState[i.CROUCH]=!1);break;case i.UP:this.keysState[i.DOWN]||(this.movementAudioControl.stop(),clearInterval(this.keysState[i.UP]),this.keysState[i.UP]=null);break;case i.DOWN:this.keysState[i.UP]||(this.movementAudioControl.stop(),clearInterval(this.keysState[i.DOWN]),this.keysState[i.DOWN]=null);break;case i.LEFT_ROTATION:clearInterval(this.keysState[i.LEFT_ROTATION]),this.keysState[i.LEFT_ROTATION]=null;break;case i.RIGHT_ROTATION:clearInterval(this.keysState[i.RIGHT_ROTATION]),this.keysState[i.RIGHT_ROTATION]=null}})),window.addEventListener("mousemove",(t=>{let e=this.areaState.getCanvas3D().getBoundingClientRect(),i=t.clientX-e.left;this.curMousePosX=i})),window.addEventListener("keydown",(t=>{switch(t.key){case i.RUN:this.keysState[i.CROUCH]||(this.movementAudioControl.setAudioRunning(),this.keysState[i.RUN]=!0);break;case i.CROUCH:this.keysState[i.RUN]||(this.movementAudioControl.setAudioCrouching(),this.keysState[i.CROUCH]=!0);break;case i.UP:if(this.keysState[i.DOWN])return;this.keysState[i.CROUCH]||this.keysState[i.RUN]||this.movementAudioControl.setAudioWalking(),this.movementAudioControl.play(),this.keysState[i.UP]||(this.keysState[i.UP]=setInterval((()=>{this.moveForward()}),25));break;case i.DOWN:if(this.keysState[i.UP])return;this.keysState[i.CROUCH]||this.keysState[i.RUN]||this.movementAudioControl.setAudioWalking(),this.movementAudioControl.play(),this.keysState[i.DOWN]||(this.keysState[i.DOWN]=setInterval((()=>{this.moveBackward()}),25));break;case i.LEFT_ROTATION:this.keysState[i.LEFT_ROTATION]||(this.keysState[i.LEFT_ROTATION]=setInterval((()=>{this.rotate("LEFT")}),25));break;case i.RIGHT_ROTATION:this.keysState[i.RIGHT_ROTATION]||(this.keysState[i.RIGHT_ROTATION]=setInterval((()=>{this.rotate("RIGHT")}),25))}}))}isPlayerMoving(){return this.keysState[i.UP]||this.keysState[i.DOWN]}isPlayerCrouching(){return this.keysState[i.CROUCH]}isPlayerRunning(){return this.keysState[i.RUN]}getBullets(){return this.bullets}setBullets(t){this.bullets=t}removeBullets(t){this.bullets.splice(t,1)}rotate(t){let e=this.keysState[i.CROUCH]?this.crouchingAngularVel:this.standingAngularVel;"LEFT"===t?this.dirUVec.updateDir(-e):"RIGHT"===t&&this.dirUVec.updateDir(e)}moveForward(){let t=this.keysState[i.CROUCH]?this.crouchingVel:this.keysState[i.RUN]?this.runningVel:this.standingVel,e=t*this.dirUVec.getX(),s=t*this.dirUVec.getY();this.util.inMapBlock(this.xPos+e,this.yPos+s,this.areaState.getMap(),this.areaState.getCellWidth(),this.areaState.getCellHeight())||(this.yPos+=t*this.dirUVec.getY(),this.xPos+=t*this.dirUVec.getX())}moveBackward(){let t=this.keysState[i.CROUCH]?this.crouchingVel:this.keysState[i.RUN]?this.runningVel:this.standingVel,e=-t*this.dirUVec.getX(),s=-t*this.dirUVec.getY();this.util.inMapBlock(this.xPos+e,this.yPos+s,this.areaState.getMap(),this.areaState.getCellWidth(),this.areaState.getCellHeight())||(this.yPos-=t*this.dirUVec.getY(),this.xPos-=t*this.dirUVec.getX())}reset(){this.xPos=300,this.yPos=400,this.dirUVec.setDir(270)}draw2D(){let t=this.areaState.getCanvas2D().getContext("2d");t.beginPath(),t.arc(this.xPos,this.yPos,this.playerCircleRadius,0,2*Math.PI,!1),t.fillStyle="green",t.fill()}drawCursor3D(){let t=this.areaState.getCanvas3D().getContext("2d"),e=this.areaState.geCanvast3DHeight()/2,i=this.curMousePosX+1,s=e;t.fillStyle="white",t.fillRect(this.curMousePosX,e-10,2,20),t.fillRect(i-10,s-1,20,2),t.setTransform(1,0,0,1,0,0)}getUnitVec(){return this.dirUVec}getXMid(){return this.xPos}getYMid(){return this.yPos}}var n=function(){function t(t){void 0===t&&(t=void 0),this.comparers=t||[]}return t.create=function(){return new t},t.prototype.thenKey=function(t){return this.sortKey(t)},t.prototype.thenKeyDescending=function(t){return this.sortKeyDescending(t)},t.prototype.sortKey=function(e){var i=this.createComparer(e,(function(t,e){return t<e?-1:t>e?1:0})),s=this.comparers.slice();return s.push(i),new t(s)},t.prototype.sortKeyDescending=function(e){var i=this.createComparer(e,(function(t,e){return t<e?1:t>e?-1:0})),s=this.comparers.slice();return s.push(i),new t(s)},t.prototype.createComparer=function(t,e){return function(i,s){var a=t(i),l=t(s);return e(a,l)}},t.prototype.build=function(){var t=this;return function(e,i){for(var s=0,a=t.comparers;s<a.length;s++){var l=(0,a[s])(e,i);if(0!==l)return l}return 0}},t}().create;function c(t){var e="function"==typeof Symbol&&t[Symbol.iterator],i=0;return e?e.call(t):{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}}}var g,u=function(t,e,i){var s=t[e];t[e]=t[i],t[i]=s};function y(t){var e=[],i=function(e){return function(t,e){var i,s;if(0!==t.length){var a,l=0;try{for(var r=c(t),o=r.next();!o.done;o=r.next()){var h=o.value;a=l++>0?e(h,a)>0?h:a:h}}catch(t){i={error:t}}finally{try{o&&!o.done&&(s=r.return)&&s.call(r)}finally{if(i)throw i.error}}return a}}(e,(function(e,i){var s=e.item,a=i.item;return t(a,s)}))},s={push:function(i){var s=e.length;for(e.push(i);s>0;){var a=s-1>>1;if(!(t(i,e[a])<0))break;u(e,s,a),s=a}},pushRange:function(t){var e,i;try{for(var a=c(t),l=a.next();!l.done;l=a.next()){var r=l.value;s.push(r)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(i=a.return)&&i.call(a)}finally{if(e)throw e.error}}},pop:function(){if(0===e.length)return null;var s=e[0];e[0]=e[e.length-1],e.length=e.length-1;for(var a=0;;){for(var l=e[a],r=1+(a<<1),o=[],h=0;h<2;++h){var n=r+h;n<e.length&&o.push({item:e[n],index:n})}if(0===o.length)break;var c=i(o);if(!(t(c.item,l)<0))break;u(e,a,c.index),a=c.index}return s},get length(){return e.length}};return s}function p(t){var e=y((function(e,i){var s=t(e.item,i.item);return 0===s?e.order-i.order:s})),i=0,s={push:function(t){return e.push({item:t,order:i++})},pushRange:function(t){var e,i;try{for(var a=c(t),l=a.next();!l.done;l=a.next()){var r=l.value;s.push(r)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(i=a.return)&&i.call(a)}finally{if(e)throw e.error}}},pop:function(){var t=e.pop();return t?t.item:null},get length(){return e.length}};return s}class d{constructor(t){this.cellStraightDist=1,this.areaState=t,this.areaState.getMap().getBlocks().forEach(((t,i)=>{let s=new Array;t.forEach(((t,a)=>{if(t.getBlockType()===e.Wall)s.push(null);else if(t.getBlockType()===e.Wall){let t={col:a,row:i},e=(this.getXYFromRowCol({col:a,row:i}),null),l=999999;s.push({id:`${t}`,position:t,h_score:e,g_score:l,f_score:999999})}})),this.nodes.push(s)}))}getXYFromRowCol(t){return{x:t.col*this.areaState.getCellWidth()+this.areaState.getCellWidth()/2,y:t.row*this.areaState.getCellHeight()+this.areaState.getCellHeight()/2}}getNodeNeighbours(t,e){let i=[],s=this.getXYFromRowCol(e.position);if(t.position.col>0&&t.position.row>0&&null!=this.nodes[t.position.row-1][t.position.col-1]){let e=this.nodes[t.position.row-1][t.position.col-1];if(null===e.h_score){let i=this.getXYFromRowCol(t.position);e.h_score=Math.sqrt(Math.pow(s.x-i.x,2)+Math.pow(s.y-i.y,2))}let a={node:e,d_val:Math.sqrt(this.cellStraightDist+this.cellStraightDist)};i.push(a)}if(t.position.row>0&&null!=this.nodes[t.position.row-1][t.position.col]){let e=this.nodes[t.position.row-1][t.position.col];if(null===e.h_score){let i=this.getXYFromRowCol(t.position);e.h_score=Math.sqrt(Math.pow(s.x-i.x,2)+Math.pow(s.y-i.y,2))}let a={node:e,d_val:Math.sqrt(this.cellStraightDist)};i.push(a)}if(t.position.col<this.nodes[0].length-1&&t.position.row>0&&null!=this.nodes[t.position.row-1][t.position.col+1]){let e=this.nodes[t.position.row-1][t.position.col+1];if(null===e.h_score){let i=this.getXYFromRowCol(t.position);e.h_score=Math.sqrt(Math.pow(s.x-i.x,2)+Math.pow(s.y-i.y,2))}let a={node:e,d_val:Math.sqrt(this.cellStraightDist+this.cellStraightDist)};i.push(a)}if(t.position.col>0&&null!=this.nodes[t.position.row][t.position.col-1]){let e=this.nodes[t.position.row][t.position.col-1];if(null===e.h_score){let i=this.getXYFromRowCol(t.position);e.h_score=Math.sqrt(Math.pow(s.x-i.x,2)+Math.pow(s.y-i.y,2))}let a={node:e,d_val:Math.sqrt(this.cellStraightDist)};i.push(a)}if(t.position.col<this.nodes[0].length-1&&null!=this.nodes[t.position.row][t.position.col+1]){let e=this.nodes[t.position.row][t.position.col+1];if(null===e.h_score){let i=this.getXYFromRowCol(t.position);e.h_score=Math.sqrt(Math.pow(s.x-i.x,2)+Math.pow(s.y-i.y,2))}let a={node:e,d_val:Math.sqrt(this.cellStraightDist)};i.push(a)}if(t.position.col>0&&t.position.row<this.nodes.length-1&&null!=this.nodes[t.position.row+1][t.position.col-1]){let e=this.nodes[t.position.row+1][t.position.col-1];if(null===e.h_score){let i=this.getXYFromRowCol(t.position);e.h_score=Math.sqrt(Math.pow(s.x-i.x,2)+Math.pow(s.y-i.y,2))}let a={node:e,d_val:Math.sqrt(this.cellStraightDist+this.cellStraightDist)};i.push(a)}if(t.position.row<this.nodes.length-1&&null!=this.nodes[t.position.row+1][t.position.col]){let e=this.nodes[t.position.row+1][t.position.col];if(null===e.h_score){let i=this.getXYFromRowCol(t.position);e.h_score=Math.sqrt(Math.pow(s.x-i.x,2)+Math.pow(s.y-i.y,2))}let a={node:e,d_val:Math.sqrt(this.cellStraightDist)};i.push(a)}if(t.position.col<this.nodes[0].length-1&&t.position.row<this.nodes.length-1&&null!=this.nodes[t.position.row+1][t.position.col+1]){let e=this.nodes[t.position.row+1][t.position.col+1];if(null===e.h_score){let i=this.getXYFromRowCol(t.position);e.h_score=Math.sqrt(Math.pow(s.x-i.x,2)+Math.pow(s.y-i.y,2))}let a={node:e,d_val:Math.sqrt(this.cellStraightDist+this.cellStraightDist)};i.push(a)}return i}reconstructPath(t){let e=t;for(this.path.unshift(e);null!=e.parent_Node;)e=e.parent_Node,this.path.unshift(e)}calculatePath(t,e,i,s){const a={id:"start",position:{row:t,col:e},g_score:0,f_score:null,h_score:null},l={id:"end",position:{row:i,col:s},g_score:999999,f_score:999999,h_score:0},r=function(t,e,i){void 0===e&&(e="min"),void 0===i&&(i=!0);var s=n();return(i?p:y)(("min"===e?s.sortKey:s.sortKeyDescending).call(s,(t=>t.f_score)).build())}();r.push(a);let o,h={start:!0};for(;r.length>0;){if(o=r.pop(),h[o.id]=!1,o===l)return this.reconstructPath(l),this.path;this.getNodeNeighbours(o,l).forEach((t=>{let e=o.g_score+t.d_val;e<t.node.g_score&&(t.node.parent_Node=o,t.node.g_score=e,t.node.f_score=t.node.g_score+t.node.h_score,h[t.node.id]||(r.push(t.node),h[t.node.id]=!0))}))}return null}}class m{constructor(t,e,i,s){this.dim=5,this.velocity=2,this.util=new r,this.xPos=t,this.yPos=e,this.uVecDir=i,this.areaState=s,this.searcher=new d(s)}move(t,e){let i=this.util.getMapBlockFromCoord(t,e,this.areaState.getCellWidth(),this.areaState.getCellHeight()),s=this.util.getMapBlockFromCoord(this.xPos,this.yPos,this.areaState.getCellWidth(),this.areaState.getCellHeight());this.searcher.calculatePath(s.row,s.col,i.row,i.col),this.xPos+=this.uVecDir.getX()*this.velocity,this.yPos+=this.uVecDir.getY()*this.velocity,this.checkObjectHit()&&this.uVecDir.updateDir(180+10*Math.random())}checkObjectHit(){let t=new l(this.uVecDir.getDirDeg());for(let e=0;e<360;e+=5){let e=this.xPos+t.getX()*(this.dim+.01),i=this.yPos+t.getY()*(this.dim+.01);if(this.util.inMapBlock(e,i,this.areaState.getMap(),this.areaState.getCellWidth(),this.areaState.getCellHeight()))return!0;t.updateDir(5)}return!1}draw2D(){let t=this.areaState.getCanvas2D().getContext("2d");t.fillStyle="red",t.moveTo(this.xPos,this.yPos),t.beginPath(),t.arc(this.xPos,this.yPos,this.dim,0,2*Math.PI),t.fill()}getX(){return this.xPos}getY(){return this.yPos}getDir(){return this.uVecDir}getDim(){return this.dim}}!function(t){t[t.Player=0]="Player",t[t.Wall=1]="Wall",t[t.Ray=2]="Ray",t[t.None=3]="None"}(g||(g={}));class E{constructor(t,e,i){this.walkingFrameCount=0,this.walkingFrameIncr=4,this.util=new r,this.randY=350*Math.random(),this.gameState=t,this.areaState=e,this.uVecDir=i;let s={r:0,g:183,b:255};this.grd=this.areaState.getCanvas3D().getContext("2d").createLinearGradient(0,this.areaState.geCanvast3DHeight(),0,this.areaState.geCanvast3DHeight()/2);let a=Math.ceil(this.areaState.geCanvast3DHeight()/2/2.5),l=1/a;for(let t=0;t<a;t++)this.grd.addColorStop(t*l,`rgb(${s.r}, ${s.g}, ${s.b})`),this.adjustColor(s,{r:0,g:-1,b:-1.4})}getEdgeCords(t){let e=this.areaState.getCellWidth(),i=this.areaState.getCellHeight(),s=e*t.getCol(),a=i*t.getRow();return{C:{x:s,y:a+i},D:{x:s+e,y:a+i},B:{x:s+e,y:a},A:{x:s,y:a}}}checkEdgeRay(t){let e=this.getEdgeCords(t);this.edgeRay=!1;let i=null,s=null,a=null,l=null;Object.keys(e).forEach((t=>{i={x:e[t].x-this.gameState.getCenterX(),y:e[t].y-this.gameState.getCenterY()},s=Math.sqrt(Math.pow(i.x,2)+Math.pow(i.y,2)),a=180*Math.acos((this.uVecDir.getX()*i.x+this.uVecDir.getY()*i.y)/s)/Math.PI,l=Math.sqrt(Math.pow(e[t].x-this.endX,2)+Math.pow(e[t].y-this.endY,2)),a<=.1&&l<=3.5&&(this.edgeRay=!0)}))}calculateCollisionsAndIfEdge(){let t=this.gameState.getCenterX(),e=this.gameState.getCenterY();this.bulletCollisionArray=[],this.enemyNpcCollisionArray=[];let i=this.gameState.getAllBullets(),s=this.gameState.getAllEnemies();for(;!this.util.inMapBlock(t,e,this.areaState.getMap(),this.areaState.getCellWidth(),this.areaState.getCellHeight());){for(let s=i.length-1;s>=0;s--){let a=i[s];Math.sqrt(Math.pow(t-a.getX(),2)+Math.pow(e-a.getY(),2))<a.getDim()&&(this.bulletCollisionArray.push({collisionX:t,collisionY:e,objectHit:a,length:null}),i.splice(s,1))}for(let i=s.length-1;i>=0;i--){let a=s[i];Math.sqrt(Math.pow(t-a.getX(),2)+Math.pow(e-a.getY(),2))<a.getDim()&&(this.enemyNpcCollisionArray.push({collisionX:t,collisionY:e,objectHit:a,length:null}),s.splice(i,1))}t+=this.uVecDir.getX()/4,e+=this.uVecDir.getY()/4}this.endX=t,this.endY=e;let a=this.util.getMapBlockFromCoord(t,e,this.areaState.getCellWidth(),this.areaState.getCellHeight()),l=this.areaState.getMap().getBlocks()[a.row][a.col];this.checkEdgeRay(l)}getAdjustedLength(t,e){return Math.sqrt(Math.pow(this.gameState.getCenterX()-t,2)+Math.pow(this.gameState.getCenterY()-e,2))*(this.uVecDir.getX()*this.gameState.getCenterDir().getX()+this.uVecDir.getY()*this.gameState.getCenterDir().getY())}performRayCalculations(t){this.uVecDir=t,this.calculateCollisionsAndIfEdge(),this.length=this.getAdjustedLength(this.endX,this.endY),this.bulletCollisionArray.forEach((t=>t.length=this.getAdjustedLength(t.collisionX,t.collisionY))),this.enemyNpcCollisionArray.forEach((t=>t.length=this.getAdjustedLength(t.collisionX,t.collisionY))),this.gameState.isPlayerCrouching()?(this.walkingFrameIncr=this.walkingFrameIncr/Math.abs(this.walkingFrameIncr),this.walkingFrameIncr*=2):this.gameState.isPlayerRunning()?(this.walkingFrameIncr=this.walkingFrameIncr/Math.abs(this.walkingFrameIncr),this.walkingFrameIncr*=8):(this.walkingFrameIncr=this.walkingFrameIncr/Math.abs(this.walkingFrameIncr),this.walkingFrameIncr*=4),this.gameState.isPlayerMoving()?(this.walkingFrameCount<=60&&this.walkingFrameCount>=0||(this.walkingFrameIncr*=-1),this.walkingFrameCount+=this.walkingFrameIncr):this.walkingFrameCount=0}drawRay2D(){let t=this.areaState.getCanvas2D().getContext("2d");this.gameState.getCenterDir().getDirRad()==this.uVecDir.getDirRad()?t.strokeStyle="#FF0000":t.strokeStyle="black",t.beginPath(),t.moveTo(this.gameState.getCenterX(),this.gameState.getCenterY()),this.bulletCollisionArray.length>0?(t.strokeStyle="blue",t.lineTo(this.bulletCollisionArray[0].collisionX,this.bulletCollisionArray[0].collisionY),t.stroke(),t.strokeStyle="green",t.lineTo(this.endX,this.endY),t.stroke()):(t.strokeStyle="black",t.lineTo(this.endX,this.endY),t.stroke())}adjustColor(t,e){t.r=Math.max(t.r+e.r,0),t.g=Math.max(t.g+e.g,0),t.b=Math.max(t.b+e.b,0)}drawRay3D(t,e){let i=this.areaState.getCanvas3D().getContext("2d"),s=this.areaState.geCanvast3DHeight(),a=1/(this.length/12)*-300,l=this.walkingFrameCount/10,r=s/2-s/(this.length/12)+(this.gameState.isPlayerCrouching()?a:0)+l,h=s-r+2*l+(this.gameState.isPlayerCrouching()?2*a:0),n=h-r;i.fillStyle="black",i.fillRect(e*t,0,t,r),i.fillStyle="white",i.fillRect(e*t,this.randY,1,1);let c={r:175,g:175,b:175};if(this.adjustColor(c,{r:-this.length/3.5,g:-this.length/3.5,b:-this.length/3.5}),i.fillStyle=`rgb(${c.r}, ${c.g}, ${c.b})`,Math.abs(this.gameState.getCenterDir().getDirRad()-this.uVecDir.getDirRad())<=.0075)i.fillStyle="#FF0000";else if(this.edgeRay){let t={r:125,g:125,b:125};this.adjustColor(t,{r:-this.length/3.5,g:-this.length/3.5,b:-this.length/3.5}),i.fillStyle=`rgb(${t.r}, ${t.g}, ${t.b})`}i.fillRect(e*t,r,t,n),i.fillStyle=this.grd,i.fillRect(e*t,h,t,s-h);let g=s/2-s/(this.length/12)+l,u=s-g+2*l,y=this.bulletCollisionArray.concat(this.enemyNpcCollisionArray);y.sort(((t,e)=>t.length<e.length?1:t.length>e.length?-1:0)),y.forEach((a=>{let l=(u-g)/2+g,r=null!=a.length?a.length:10,h=1/(r/12)*-300,n=-1,c=1,y={r:0,g:0,b:0};if(a.objectHit instanceof o){let t=a.objectHit.getCrouchedBullet();this.gameState.isPlayerCrouching()?t||(l+=h):t&&(l+=-1*h),n=s/r}else a.objectHit instanceof m&&(this.gameState.isPlayerCrouching()&&(l+=h),n=s/(r/12),c=8);let p=l-n/c,d=l+n;if(a.objectHit instanceof o)y={r:224,g:86,b:0},this.adjustColor(y,{r:-r/2,g:-r/2*.4,b:0}),i.fillStyle="white",i.fillRect(e*t,p-.5,t,d-p+1);else if(a.objectHit instanceof m){let s=l-n/(c/2);y={r:255,g:98,b:0},this.adjustColor(y,{r:-r/2,g:-r/2*.4,b:0}),i.fillStyle=`rgb(${y.r}, ${y.g}, ${y.b})`,i.fillRect(e*t,s,t,d-s),i.fillStyle="black",i.fillRect(e*t,p,t,d-p+.5),y={r:0,g:219,b:22},this.adjustColor(y,{r:0,g:-r/2,b:-r/2*.1})}i.fillStyle=`rgb(${y.r}, ${y.g}, ${y.b})`,i.fillRect(e*t,p,t,d-p)}))}}let C=document.querySelector("#canvasLeft"),w=document.querySelector("#canvasRight"),f=new a("movementAudioElem"),S=new a("shootingAudioElem",1,!1,1),k=[[e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall],[e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Wall,e.Wall,e.Wall,e.Empty,e.Empty,e.Empty,e.Wall,e.Wall,e.Wall,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Wall,e.Empty,e.Wall,e.Empty,e.Wall,e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall,e.Wall],[e.Wall,e.Empty,e.Empty,e.Wall,e.Empty,e.Wall,e.Empty,e.Wall,e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Wall,e.Empty,e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Wall,e.Wall,e.Empty,e.Empty,e.Empty,e.Wall,e.Empty,e.Empty,e.Wall,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall,e.Empty,e.Wall,e.Wall,e.Wall,e.Empty,e.Wall],[e.Wall,e.Empty,e.Wall,e.Wall,e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall],[e.Wall,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Empty,e.Wall],[e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall,e.Wall]];const v=new class{constructor(t,e,i){this.canvas3D=e,this.canvas2D=t,this.cellWidth=t.width/i[0].length,this.cellHeight=t.height/i.length,this.map=new s(this.cellWidth,this.cellHeight,i,t)}getCanvas2DHeight(){return this.canvas2D.height}geCanvast3DHeight(){return this.canvas3D.height}getCanvas2DWidth(){return this.canvas2D.width}getCanvas3DWidth(){return this.canvas3D.width}getCanvas2D(){return this.canvas2D}getCanvas3D(){return this.canvas3D}getCellWidth(){return this.cellWidth}getCellHeight(){return this.cellHeight}getMap(){return this.map}drawMap(){this.map.drawMap()}}(C,w,k),D=new class{constructor(t,e,i){this.util=new r,this.totNumEnemiesInWave=1,this.numEnemiesRemaining=1,this.areaState=t,this.player=new h(300,400,new l(270),t,e,i),this.enemyNpcs=[new m(300,350,new l(45),t)]}isPlayerMoving(){return this.player.isPlayerMoving()}isPlayerCrouching(){return this.player.isPlayerCrouching()}isPlayerRunning(){return this.player.isPlayerRunning()}getCenterX(){return this.player.getXMid()}getCenterY(){return this.player.getYMid()}getCenterDir(){return this.player.getUnitVec()}drawPlayer2D(){this.player.draw2D()}drawPlayerCrosshair(){this.player.drawCursor3D()}updateBullets(){this.player.getBullets().slice(0).forEach(((t,e)=>{t.moveBullet(),t.checkWallHit()&&this.player.removeBullets(e)}))}drawBullets2D(){this.player.getBullets().forEach((t=>t.draw2D()))}updateEnemyNpcs(){this.enemyNpcs.forEach((t=>{t.move(this.player.getXMid(),this.player.getYMid())}))}drawEnemyNpcs2D(){this.enemyNpcs.forEach((t=>t.draw2D()))}getAllBullets(){return this.player.getBullets().slice(0)}getAllEnemies(){return this.enemyNpcs.slice(0)}checkExternalCollisions(){this.enemyNpcs.forEach((t=>{this.util.dist({x:t.getX(),y:t.getY()},{x:this.player.getXMid(),y:this.player.getYMid()})<t.getDim()+0&&this.player.reset()}));let t=this.getAllBullets();for(let e=this.enemyNpcs.length-1;e>=0;e--){let i=this.enemyNpcs[e];for(let s=0;s<t.length;s++){let a=t[s];if(this.util.dist({x:i.getX(),y:i.getY()},{x:a.getX(),y:a.getY()})<i.getDim()+a.getDim()){this.enemyNpcs.splice(e,1),this.player.removeBullets(s),this.numEnemiesRemaining--;break}}}if(0===this.numEnemiesRemaining){this.totNumEnemiesInWave++,this.numEnemiesRemaining=this.totNumEnemiesInWave;for(let t=0;t<this.totNumEnemiesInWave;t++)this.enemyNpcs.push(new m(300,350,new l(360*Math.random()),this.areaState))}}}(v,f,S),W=new class{constructor(t,e){this.rays=[],this.fov=90,this.distToProjection=350,this.util=new r,this.gameState=t,this.areaState=e}setupRays(){let t=this.gameState.getCenterDir();this.distToProjection=this.areaState.getCanvas3DWidth()/2/Math.tan(this.util.toRad(this.fov/2));let e=0;for(let i=0;i<this.areaState.getCanvas3DWidth();i+=1){let s=Math.atan((i-this.areaState.getCanvas3DWidth()/2)/this.distToProjection)+t.getDirRad(),a=new l(this.util.toDeg(s));if(this.rays[e])this.rays[e].performRayCalculations(a);else{let t=new E(this.gameState,this.areaState,a);t.performRayCalculations(a),this.rays.push(t)}e++}}draw2D(){this.rays.forEach((t=>t.drawRay2D()))}draw3D(){let t=this.areaState.getCanvas3DWidth()/this.rays.length;this.rays.forEach(((e,i)=>{e.drawRay3D(t,i)}))}}(D,v);function R(t){t.getContext("2d").clearRect(0,0,t.width,t.height)}setInterval((function(){R(C),R(w),v.drawMap(),D.drawPlayer2D(),W.setupRays(),W.draw2D(),D.checkExternalCollisions(),D.updateBullets(),D.updateEnemyNpcs(),D.drawEnemyNpcs2D(),D.drawBullets2D(),W.draw3D(),D.drawPlayerCrosshair()}),1e3/60)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,